#!/bin/bash

##
# pre-commit hook used to prevent mistakes while amending commits.
#
# Prevents the user from amending a merge commit (can be bypassed using git
# amend alias) and from amending a commit found in other branches.
##

# Handle amends (third arg is only supplied on commits with one of -c, -C, or --amend)
if [ "$3" == HEAD ] ; then
  if [ ! $(git symbolic-ref HEAD 2> /dev/null) ] ; then
    exit 0 ; # don't interrupt amending during rebase on detached HEAD
  fi

  # prevent accidental amends of merge commits
  parents=$(git cat-file -p HEAD | grep '^parent' | wc -l);
  if [ $parents -gt 1 ] ; then
    echo "abort: HEAD is a merge commit. use one of the following if you really want to amend it:"
    echo "  $ git commit -n --amend ..."
    echo "  $ git amend -n ..."
    exit 1
  fi

  # prevent amending commit found in other branches
  branches=$(git branch -a --contains $(git log -1 --pretty=tformat:%h) | grep -v $(git brname))
  if [ -n "$branches" ] ; then
    echo "abort: the following branches contain the commit to be amended:"
    for b in $branches ; do echo -e "\t$b" ; done
    exit 1
  fi

# Non-amend, look for ticket number prefix on the branch name, and if found,
# add a 'refs #<ticket-number>' to the commit message.
else
  branch=$(git rev-parse --abbrev-ref HEAD)
  ticket=$(echo $branch | perl -pe 's|(^\d+)[-_].*|\1|')
  if [ "$branch" != "$ticket" ] ; then
    line=$(grep '^#' -nm 1 $1 | cut -d':' -f1)
    sed -i "${line}i refs #${ticket}\n" $1
  fi
fi

exit 0
